(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



xAct`xLightCone`$Version={"0.0.1",{2014,09,29}};


xAct`xLightCone`$xTensorVersionExpected={"1.1.1",{2014,9,28}};
xAct`xLightCone`$xPertVersionExpected={"1.0.5",{2014,9,28}};


(* xLightCone:  *)

(* Copyright (C) 2014- Obinna Umeh, Cyril Pitrou *)

(* This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License,or (at your option) any later version.

This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.

You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place-Suite 330, Boston, MA 02111-1307,
  USA. 
*)


(* :Title: xLightCone *)

(* :Author: Obinna Umeh & Cyril Pitrou*)

(* :Context: xAct`xLightCone` *)

(* :Copyright: Obinna Umeh & Cyril Pitrou (2014-) *)

(* :Keywords: *)

(* :Source: xLightCone.nb *)

(* :Warning: *)

(* :Mathematica Version: 9.0 and later *)

(* :Limitations: *)


If[Unevaluated[xAct`xCore`Private`$LastPackage]===xAct`xCore`Private`$LastPackage,xAct`xCore`Private`$LastPackage="xAct`xLightCone`"];


Off[General::nostdvar]
Off[General::nostdopt]
BeginPackage["xAct`xLightCone`",{"xAct`xPert`","xAct`xTensor`","xAct`xPerm`","xAct`xCore`","xAct`ExpressionManipulation`"}]


If[Not@OrderedQ@Map[Last,{$xTensorVersionExpected,xAct`xTensor`$Version}],Throw@Message[General::versions,"xTensor",xAct`xTensor`$Version,$xTensorVersionExpected]]

If[Not@OrderedQ@Map[Last,{$xPertVersionExpected,xAct`xPert`$Version}],Throw@Message[General::versions,"xPert",xAct`xPert`$Version,$xPertVersionExpected]]


Print[xAct`xCore`Private`bars];
Print["Package xAct`xLightCone`  version ",$Version[[1]],", ",$Version[[2]]];
Print["CopyRight (C) 2015-, Obinna Umeh under the General Public License."];


Off[General::shdw]
xAct`xLightCone`Disclaimer[]:=Print["These are points 11 and 12 of the General Public License:\n\nBECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM `AS IS\.b4 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES."]
On[General::shdw]


If[xAct`xCore`Private`$LastPackage==="xAct`xLightCone`",
Unset[xAct`xCore`Private`$LastPackage];
Print[xAct`xCore`Private`bars];
Print["These packages come with ABSOLUTELY NO WARRANTY; for details type Disclaimer[]. This is free software, and you are welcome to redistribute it under certain conditions. See the General Public License for details."];
Print[xAct`xCore`Private`bars]];


$CovDFormat="Prefix";
Message[General::nostdvar,"$CovDFormat","Prefix"];


(*** VERSIONS ***)

$Version::usage="$Version is a global variable giving the version of the package xLightCone in use.";

$xTensorVersionExpected::usage="$xTensorVersionExpected is a global variable giving the oldest possible version of the package xTensor which is required by the version of the package xLightCone in use.";

$xPertVersionExpected::usage="$xPertVersionExpected is a global variable giving the oldest possible version of the package xPert which is required by the version of the package xLightCone in use.";


a::usage = "";

H::usage = "";

DefMatterFields::usage  = "";

DefMetricFields::usage = "";

DefScreenProjectedTensor::usage = "";

DefScreenSpaceMetric::usage = "";

SetSlicingUpToScreenSpace::usage = "";

SetSlicingUpToScreenSpaceObinna::usage = "";

SplitMetric ::usage = "";

ToInducedDerivativeScreenSpace::usage="";

ToLightConeFromRules::usage = "";

$DebugInfoQ::usage = "";

$ConformalTime::usage ="";


Begin["xAct`xLightCone`Private`"]


(***DEFAULT OPTIONS AND PROTECTED NAMES***)
(* We should clean that to make sure there are no usueless definitions *)
BackgroundFieldMethod=False;
$DebugInfoQ=False;
$CommutecdRules={};
$ConformalTime=True;
$FirstOrderVectorPerturbations=True;
$FirstOrderTensorPerturbations=True;
$OpenConstantsOfStructure=True;
$PrePrint=ScreenDollarIndices;
$SortCovDAutomatic=True;
Off[RuleDelayed::rhs];


(***PRIVATE BOOLEAN FUNCTIONS***)(**Miscellaneous**)$DefInfoQ=True;
(*If set to'False',the information messages are not printed.*)

(**Testing expressions**)

AnyIndicesListQ[inds_List]:=Cases[inds,AnyIndices[_]]=!={}
(*If the list of indices contains the head'AnyIndices',then AnyIndicesListQ[inds] returns'True';otherwise it returns'False'.*)

DefTensorQ[symb_]:=Cases[$Tensors,symb]==={symb}
(*If'symb' has been defined as a tensor,then DefTensorQ[symb] returns'True';otherwise it returns'False'.*)

GaugeQ[strg_]:=Cases[{"AnyGauge","ComovingGauge","FlatGauge","IsoDensityGauge","NewtonGauge","SynchronousGauge"},strg]==={strg}
(*If'strg' matches one of the element in the list,then GaugeQ[strg] returns'True';otherwise it returns'False'.*)

InducedMetricQ[symb_]:=If[MetricQ[symb],InducedFrom[symb]=!=Null,False]
(*If'symb' is not defined as a metric,then InducedMetricQ[symb] returns'False'.Otherwise,it checks whether'symb' is an induced metric.If this is the case,then InducedMetricQ[symb] gives'True';otherwise it gives'False'.*)

SpaceTimeQ[strg_]:=Cases[{"FLCurved","FLFlat","Minkowski"},strg]==={strg}
(*If'strg' matches one of the element of the list,then SpaceTimeQ[strg] returns'True';otherwise it returns'False'.*)

TensorNullQ[tens_]:=If[Cases[SlotsOfTensor[tens],Labels]=!={},Print["** Warning: the function TensorNullQ is only suited to test tensors defined without label-indices. ",tens],With[{inds=DummyIn/@SlotsOfTensor[tens]},tens@@inds===0]]
(*TensorNullQ[tens] returns'True' if'tens' is a null tensor and'False' otherwise.This function is not suited to test tensors defined with label-indices.*)

(**Type of manifolds**)
(* Will probably disappear since we will only do curved and flat FL *)

FlatSpaceBool[Spacetype_]:=(Spacetype==="FLFlat"||Spacetype==="Minkowski")
CurvedSpaceBool[Spacetype_]:=(Spacetype==="FLCurved")


(* ::Code:: *)
DefScreenSpaceMetric[metric_[inda_, indb_], Manifold_, cd2_, {cdpost_String, cdpre_String}, InducedHypersurface_, SpaceTimeType_?SpaceTimeQ] :=
(* Extracting the specifications of the problem (metric manifold normal vector etc...)*) 
If[(MetricQ[First@InducedHypersurface]) && (xTensorQ[Last@InducedHypersurface]),
  Module[{g = First@InducedFrom[First@InducedHypersurface],u = First@Rest@InducedFrom[First@InducedHypersurface],
   vbundle = VBundleOfIndex[inda],
   h = First@InducedHypersurface,
   n = Last@InducedHypersurface,
   dim = DimOfManifold[Manifold],
   indexlist = GetIndicesOfVBundle[VBundleOfIndex[inda], 3]}, 


With[{ind1 = DummyIn[Tangent[Manifold]], ind2 = DummyIn[Tangent[Manifold]], ind3 = DummyIn[Tangent[Manifold]], ind4 = DummyIn[Tangent[Manifold]]},
   
(* Definition of the screen-space metric. Projected orthogonally to u and n.*)
   DefTensor[metric[inda, indb], Manifold, If[$TorsionSign === 1, Symmetric[{inda, indb}], {}], 
    OrthogonalTo -> {u[-inda], u[-indb], n[-inda], n[-indb]}, ProjectedWith -> {h[-inda, ind1], h[-indb, ind1]}];
   
(* We defined a covariant derivative associated to this screen metric and we will load later all its properties. *)
   DefCovD[cd2[inda], vbundle, {cdpost, cdpre}, OrthogonalTo -> {u[-inda], n[-inda]}, ProjectedWith -> {h[-inda, ind2], metric[-inda, ind2]}];
   
(* For other references we need a function to extract the radial vector out of the screen space metric*)
(* TODO check if this is useful or not*)
   RadialVectOrthToTheScreenSpace[metric] := RadialVectOrthToTheScreenSpace[metric] = n;
   

(* Warning and Error messages? I am not sure what is the purpose of this*)
   OrthogonalVectors[x_] := 
    If[x === h, Rest@InducedFrom[h], 
     If[x === metric, Flatten[{Rest@InducedFrom[h], Rest@{h, n}}],"\!\(" <> ToString[x] <>"\&-\) do not have orthogonal vectors "]];
   
   InducedFromHyperSurface[x_] :=InducedFromHyperSurface[x] = 
     If[x === h, InducedFrom[h], 
      If[x === metric, {h, n},"\!\(" <> ToString[x] <> "\&-\) is not an induced metric"]];
   

(* We need to stecify that the trace of the screen space metric is not dim but dim-2.*)
(* We also ensure automatic contraction of the metric with itself *)

   AutomaticRules[metric, MakeRule[{metric[ind3, ind1] metric[-ind3, -ind1], metric[ind1, -ind1]}]];
   AutomaticRules[metric, MakeRule[{metric[-ind3, -indb] metric[ind3, ind1], metric[ind1, -indb]}, MetricOn -> All]];
  
   AutomaticRules[metric, MakeRule[{metric[-ind1, ind1] , dim-2}]];
  
(* Finally we ensure that the covd d2 we have define is the Levi Civita derivative associated woth the screen space metric*)
   AutomaticRules[metric, MakeRule[{cd2[ind3][metric[ind1, ind2] ], 0}]];

   
(*This line assigns further properties to the metric and the radial vector, We are following xTensor. *)
(* It calls a function which is implemented below*)
PropertiesOfInducedScreenSpaceMetric[metric[inda, indb], Manifold, cd2, {n, h, CovDOfMetric[h]}];

(*We need a series of obvious upvalues for the screen space metric. *)
(* These relations are to explain that the screen space metric is induced from the space and to say that it has a covariant derivative cd2*)
InducedFrom[metric] ^= {h, n};
VBundleOfMetric[metric] ^= VBundleOfMetric[g];
MetricOfCovD[cd2] ^= metric;
AppendTo[$Metrics, metric];
MetricQ[metric] ^= True;
xAct`xLightCone`Private`InducedMetricQ[metric]^= True;
CovDOfMetric[metric] ^= cd2;

(* A series of rules which states taht the derivative cd2 is induced (orthogonality to n of a cd2 applied to a prokected tensor)*)
(* These rules are implemented in xTensor and called when we define an induced derivative. 
These were called automatically for h, but not for the screen space metric *)
xAct`xTensor`Private`MakeOrthogonalDerivative[cd2,metric[inda, -ind2],n[inda]];
xAct`xTensor`Private`MakeProjectedDerivative[cd2,metric[inda, -ind2],n[inda]];

]],

  Print["** DefMetric:: You have to ensure first that the following objects are defined:  metric induced from \
the super metric, a hypersurface specifying  four vector  and a \
screen space specifying vector"]];


(*I am not quite sure for now about the sign of ExtrinsicKSign on the \
screeen space, so i have defined the following for now, we may end up \
merging with xTensor*)
$ExtrinsicKOnSSSign = $ExtrinsicKSign;
$AccelerationOfnSign = $ExtrinsicKSign;


(*This function is called in DefScreenSpaceMetric and sets various properties for the screen space metric. It is adapted from xTensor*)
(* Maybe it is useless to copy everything here.*)
(* Maybe that would be enough to call DefInducedMetric. To be debated*)

PropertiesOfInducedScreenSpaceMetric[metric_[-ind1_, -ind2_], 
   dependencies_, covd_, {vector_, supermetric_, superCD_}] := 
  With[{vbundle = VBundleOfIndex[ind1]},
   With[{extrinsicKname = GiveSymbol[ExtrinsicK, metric],
     accelerationname = GiveSymbol[Acceleration, vector],
     projectorname = GiveSymbol[Projector, metric],
     epsilonname = GiveSymbol[epsilon, metric],
     superepsilonname = GiveSymbol[epsilon, supermetric],
     proj = ProjectWith[metric], 
     norm = Scalar@
       Simplify@
        ContractMetric[
         supermetric[-ind1, -ind2] vector[ind1] vector[ind2], 
         supermetric], indexlist = GetIndicesOfVBundle[vbundle, 3]},  

  
    With[{i1 = indexlist[[1]], i2 = indexlist[[2]], 
      i3 = indexlist[[3]]},(*Register pair metric/vector*)

     xUpSet[VectorOfInducedMetric[metric], vector];     

(* Definition of extrinsic curvature *)     
     DefTensor[extrinsicKname[i1, i2], dependencies, 
      Symmetric[{1, 2}], 
      PrintAs :> GiveOutputString[ExtrinsicK, metric], 
      OrthogonalTo -> {vector[-i1]}, 
      ProjectedWith -> {metric[i3, -i2]}, ProtectNewSymbol -> False, 
      Master -> metric, 
      DefInfo -> {"extrinsic curvature tensor", 
        "Associated to vector " <> ToString[vector]}, 
      TensorID -> {ExtrinsicK, metric}];
     

(* Definition of Acceleration *)
     DefTensor[accelerationname[i1], dependencies, 
      PrintAs :> GiveOutputString[Acceleration, vector], 
      OrthogonalTo -> {vector[-i1]}, 
      ProjectedWith -> {metric[i2, -i1]}, ProtectNewSymbol -> False, 
      Master -> metric, 
      DefInfo -> {"acceleration vector", 
        "Associated to vector " <> ToString[vector]}, 
      TensorID -> {Acceleration, vector}];
  
   
(*Relations among them and the derivatives.Improved by Thomas,
     to use HasOrthogonalIndexQ*)
     xAct`xTensor`Private`GradNormalToExtrinsicKRules[
       metric] = {superCD[a_][
         vector[b_]] :> $ExtrinsicKOnSSSign extrinsicKname[a, b]
         + $AccelerationOfnSign vector[a] accelerationname[b], 
       vector[-a_] superCD[b_][
          expr_] :> -superCD[b][vector[-a]] expr /; 
         xAct`xTensor`Private`HasOrthogonalIndexQ[expr, vector[-a]], 
       vector[a_] superCD[b_][expr_] :> -superCD[b][vector[a]] expr /;
          xAct`xTensor`Private`HasOrthogonalIndexQ[expr, vector[a]], 
       LieD[vector[_]][
          expr_] vector[-a_] :> -$AccelerationOfnSign norm \
accelerationname[-a] expr /; xAct`xTensor`Private`HasOrthogonalIndexQ[expr, vector[-a]](*,
       LieD[vector[_]][expr_]vector[a_]:>0/;
       HasOrthogonalIndexQ[expr,vector[a]]*)};

     
     xAct`xTensor`Private`ExtrinsicKToGradNormalRules[metric] = 
      extrinsicKname[a_, b_] :> 
       Module[{c = 
          DummyIn@vbundle}, $ExtrinsicKOnSSSign (supermetric[a, 
             c] superCD[-c][vector[b]] - $AccelerationOfnSign vector[
             a] accelerationname[b])];
     
     
(*Projectors and metrics*)     
     xAct`xTensor`Private`ProjectorToMetricRules[metric] = 
      metric[i1_, i2_] -> 
       supermetric[i1, i2] - vector[i1] vector[i2]/norm;
     xAct`xTensor`Private`MetricToProjectorRules[metric] = 
      supermetric[i1_, i2_] -> 
       metric[i1, i2] + vector[i1] vector[i2]/norm;

(*Define projector inert-head*)     
     DefInertHead[projectorname, LinearQ -> True, Master -> metric, 
      PrintAs :> GiveOutputString[Projector, metric], 
      ProtectNewSymbol -> False, 
      DefInfo -> {"projector inert-head", ""}];
     
     projectorname[supermetric[a_, b_]] := metric[a, b];
     (*The metric,but not the supermetric,
     can be contracted through the projector*)
     
     xTagSet[{projectorname, ContractThroughQ[projectorname, metric]},
       True];
(*The supermetric is converted into metric when contracted with the projector or covd*)
     xTagSetDelayed[{projectorname, 
       supermetric[i1_, i2_] projectorname[expr_]}, 
      metric[i1, i2] projectorname[expr] /; 
       Or[IsIndexOf[expr, -i1, metric], IsIndexOf[expr, -i2, metric]]];
     
     xTagSetDelayed[{covd, supermetric[i1_, i2_] covd[i3_][expr_]}, 
      metric[i1, i2] covd[i3][expr] /; 
       Or[IsIndexOf[covd[i3][expr], -i1, metric], 
        IsIndexOf[covd[i3][expr], -i2, metric]]];
     

(*Projection rule with vector*)     
     xTagSetDelayed[{projectorname, vector[i_] projectorname[expr_]}, 
      0 /; IsIndexOf[expr, -i, metric]];

     xTagSetDelayed[{projectorname,vector[i_]projectorname[expr_]},0/;IsIndexOf[expr,-i,metric]];
     
(*Particular cases*)
     projectorname[1] := 1;
     projectorname[rest_. x_?ScalarQ] := Scalar[x] projectorname[rest];
     projectorname[vector[i_] expr_.] := 
      0 /; Not@IsIndexOf[expr, -i, supermetric];
     projectorname[projectorname[expr_]] := projectorname[expr];
     projectorname[tensor_?xTensorQ[inds__]] := 
      tensor[inds] /; OrthogonalToVectorQ[vector][tensor];
     projectorname[covd[k_][expr_]] := covd[k][expr];
     
     xAct`xTensor`Private`ProjectDerivativeRules[
       covd] = {covd[i_][expr_] :> 
        If[IsIndexOf[expr, -i], 
         With[{dummy = DummyAs[i]}, 
          metric[i, -dummy] projectorname[superCD[dummy][expr]]], 
         projectorname[superCD[i][expr]]]};
     
     Module[{prot = 
        Unprotect[covd]},(*Leibnitz rule.Three cases considered*)
      covd[i1_][x_Scalar y_Scalar] := x covd[i1][y] + y covd[i1][x];
      (*Special definitions suggested by Cyril*)
      covd[i1_][supermetric[a_?AIndexQ, b_?AIndexQ]] := 0;
      (*Cyril suggests removing the OrthogonalToVectorQ check to handle the many-supermetrics case*)
      covd[i1_][x_ supermetric[a_?AIndexQ, b_?AIndexQ]] := 
       metric[a, b] covd[i1][x] /; OrthogonalToVectorQ[vector][x];
      covd[i1_][x_ delta[a_?AIndexQ, b_?AIndexQ]] := 
       metric[a, b] covd[i1][x] /; OrthogonalToVectorQ[vector][x];
      covd[i1_][vector[a_?AIndexQ] vector[b_?AIndexQ] x_.] := 
       0 /; And[! IsIndexOf[x, ChangeIndex@a], ! 
          IsIndexOf[x, ChangeIndex@b], ! PairQ[a, b]];

      (*Product of two,perhaps contracted,expressions*)
      covd[i1_][x_ y_] := 
       Module[{res}, res = Which[(*Both are orthogonal in all their indices.We can use the Leibnitz rule*)
          OrthogonalToVectorQ[vector][x] && OrthogonalToVectorQ[vector][y], 
          covd[i1][x] y + covd[i1][y] x,(*The expression is not globally orthogonal: complain and return unevaluated*)
         
          Not@OrthogonalToVectorQ[vector][x y], 
          Message[Validate::nonproj, x y]; $Failed,(*Expression is orthogonal, but factors are not.Avoid infinite recursion with this hack*)
          
          FreeQ[{x, y}, vector], 
          covd[i1][Expand@GradNormalToExtrinsicK@Expand[InducedDecomposition[x, {metric, vector}] InducedDecomposition[y, {metric, vector}]]],
          (*This should never happen*)True, $Failed];
        res /; res =!= $Failed];

      (*Induced derivatives of non-spatial objects are not accepted,
      not even divergencies*)
      covd[_?GIndexQ][expr_] := $Failed /; 
        Head[expr] =!= Times && Not@OrthogonalToVectorQ[vector][expr] && Message[Validate::nonproj, expr];
      Protect[Evaluate[prot]];];
 
    (*Special definitions*)
     metric /:LieD[vector[_]][metric[-a_Symbol, -b_Symbol]] := $ExtrinsicKOnSSSign (extrinsicKname[-a, -b] + extrinsicKname[-b, -a]);

     metric /:LieD[vector[_]][metric[a_Symbol, -b_Symbol]] := -$AccelerationOfnSign accelerationname[-b] vector[a];
 
    metric /: LieD[vector[_]][metric[-a_Symbol,b_Symbol]] := -$AccelerationOfnSign accelerationname[-a] vector[b];
 
    metric /: LieD[vector[_]][metric[a_Symbol,b_Symbol]] := -$ExtrinsicKOnSSSign (extrinsicKname[a, b] + 
          extrinsicKname[b,a]) - $AccelerationOfnSign (vector[a] accelerationname[b] + vector[b] accelerationname[a]);
     
    vector /:LieD[vector[_]][vector[a_Symbol]] := 0;
     
    vector /:LieD[vector[_]][vector[-a_Symbol]] := $AccelerationOfnSign norm accelerationname[-a];


     Module[{prot = Unprotect[{superepsilonname, epsilonname}]}, 
      superepsilonname /: 
       LieD[vector[_]][superepsilonname[inds__?DownIndexQ]] := 
       Module[{dummy = DummyIn[vbundle]}, $ExtrinsicKOnSSSign extrinsicKname[dummy, -dummy] superepsilonname[inds]];
     
     superepsilonname /: 
       LieD[vector[_]][superepsilonname[inds__?UpIndexQ]] := 
       Module[{dummy = DummyIn[vbundle],first = First[{inds}]}, -$ExtrinsicKOnSSSign extrinsicKname[dummy, -dummy] superepsilonname[inds]];
      
     epsilonname /: LieD[vector[_]][epsilonname[inds__?DownIndexQ]] :=
      Module[{dummy = DummyIn[vbundle]}, $ExtrinsicKOnSSSign extrinsicKname[dummy, -dummy] epsilonname[inds]];
    
     epsilonname /: LieD[vector[_]][epsilonname[inds__?UpIndexQ]] := 
       Module[{dummy = DummyIn[vbundle], 
         first = First[{inds}]}, -$ExtrinsicKOnSSSign extrinsicKname[dummy, -dummy] epsilonname[inds] 
                                 + $AccelerationOfnSign norm accelerationname[-dummy] superepsilonname[dummy, inds]];
      Protect[Evaluate[prot]]];];


    (*Gauss Codazzi Rules,
    for abstract indices.Only for Riemann.Norms are wrong*)
    With[{riemann = Riemann[covd], superRiemann = Riemann[superCD], 
      superRicci = Ricci[superCD], 
      superRicciScalar = RicciScalar[superCD], K = extrinsicKname, 
      AA = accelerationname}, 
      xAct`xTensor`Private`GaussCodazziRules[metric] := 
      {superRiemann[a_?AIndexQ, b_?AIndexQ, c_?AIndexQ, 
         d_?AIndexQ] :> 
        Module[{e = DummyIn@vbundle, PDK}, 
         PDK[x_, y_] := projectorname[vector[e] superCD[-e]@K[x, y]];
         riemann[a, b, c, 
           d] + $RiemannSign (-K[a, c] K[b, d]/norm + K[a, d] K[b, c]/norm - 
             AA[b] AA[d] vector[a] vector[c]/norm - K[b, e] K[d, -e] vector[a] vector[c]/norm^2 + 
             AA[a] AA[d] vector[b] vector[c]/norm + K[a, e] K[d, -e] vector[b] vector[c]/norm^2 + 
             AA[b] AA[c] vector[a] vector[d]/norm + K[b, e] K[c, -e] vector[a] vector[d]/norm^2 - 
             AA[a] AA[c] vector[b] vector[d]/norm - K[a, e] K[c, -e] vector[b] vector[d]/
               norm^2 + $ExtrinsicKOnSSSign (vector[b] vector[c] PDK[a, d]/norm^2 + 
                vector[a] vector[d] PDK[b, c]/norm^2 - vector[a] vector[c] PDK[b, d]/norm^2 - 
                vector[b] vector[d] PDK[a, c]/norm^2 + vector[d] covd[a]@K[b, c]/norm - 
                vector[c] covd[a]@K[b, d]/norm - vector[d] covd[b]@K[a, c]/norm + 
                vector[c] covd[b]@K[a, d]/norm + vector[b] covd[c]@K[a, d]/norm - 
                vector[a] covd[c]@K[b, d]/norm - vector[b] covd[d]@K[a, c]/norm + 
                vector[a] covd[d]@K[b, c]/norm) + $AccelerationOfnSign (vector[b] vector[
                  d] covd[c]@AA[a]/norm - vector[a] vector[d] covd[c]@AA[b]/norm - 
                vector[b] vector[c] covd[d]@AA[a]/norm + vector[a] vector[c] covd[d]@AA[b]/norm))], 

        superRicci[a_?AIndexQ, b_?AIndexQ] :> 
        Module[{c = DummyIn@vbundle}, 
         ReleaseHold[Hold[superRiemann[a, -c, b, c]] /.xAct`xTensor`Private`GaussCodazziRules[metric]]], 

       superRicciScalar[] :>Module[{a = DummyIn@vbundle, b = DummyIn@vbundle}, 
         Expand[(metric[a, b] + vector[a] vector[b]/norm) ReleaseHold[Hold[superRicci[-a, -b]] /. xAct`xTensor`Private`GaussCodazziRules[metric]]]]}];

    If[$ProtectNewSymbols, 
     Protect[extrinsicKname, accelerationname, projectorname]];]];


DirectionVectorQ[expr_]:=False;

SetSlicingUpToScreenSpaceObinna[g_?MetricQ, u_, normu_: - 1, h_, 
  cd_, {cdpost_String, cdpre_String}, n_, normn_: 1, NSS_, 
  cd2_, {cd2post_String, cd2pre_String}, SpaceTimeType_?SpaceTimeQ] := 
 Module[{m, p, q, DummyS, DummyV, DummyT, ui, indsdimminustwo, 
   indsdim, dim, prot,prot2},
  With[{Manifold = ManifoldOfCovD@CovDOfMetric[g], 
    CD = CovDOfMetric[g],ah=a[h],Hh=H[h]},
   dim = DimOfManifold[Manifold];
   

   With[{ind1 = DummyIn[Tangent[Manifold]],ind2 = DummyIn[Tangent[Manifold]],ind3 = DummyIn[Tangent[Manifold]], 
     ind4 = DummyIn[Tangent[Manifold]], ind5 = DummyIn[Tangent[Manifold]], ind6 = DummyIn[Tangent[Manifold]], ind7 = DummyIn[Tangent[Manifold]], 
     i1 = DummyIn[Tangent[Manifold]], i2 = DummyIn[Tangent[Manifold]], i3 = DummyIn[Tangent[Manifold]], i4 = DummyIn[Tangent[Manifold]], i5 = DummyIn[Tangent[Manifold]],
      dummy = DummyIn[Tangent[Manifold]]},


    DefTensor[u[-ind1], {Manifold},PrintAs -> "\!\(" <> ToString[u] <> "\&-\)"]
         
    
    Off[DefMetric::old];
    (* Definition of the space induced metric. Standard in xTensor.*)
    DefMetric[1, h[-ind1, -ind2], cd, {cdpost, cdpre},InducedFrom -> {g, u},PrintAs -> "\!\(" <> ToString[h] <> "\&-\)"];
    On[DefMetric::old]; 
   

    (* Definition of the direction vector *)
    DefTensor[n[-ind1], {Manifold}, OrthogonalTo -> {u[ind1]},ProjectedWith -> {h[ind1, -ind2]},PrintAs -> "\!\(" <> ToString[n] <> "\&-\)"];
     
(*A boolean value which is used for furtehr checks and avoids the user to create problems if the screen space splitting had not been defined.*)
    DirectionVectorQ[n]^=True;

    (* The Screen space metric definition. We call the function defined above which contains most of the definitions. 
    This is the central part of our splitting here.*)  
    DefScreenSpaceMetric[NSS[-ind1, -ind2], Manifold,cd2, {cd2post, cd2pre}, {h, n}, SpaceTimeType];
     
     
    (*We remove automatic Leibniz rule when there is a Scalar Head.This is to ensure that the induced derivative does not spoil an'InducedDecomposition'*)
    prot = Unprotect[cd];
    prot2 = Unprotect[cd2];
    cd[a_][Scalar[expr_]] =.;
    cd2[a_][Scalar[expr_]] =.;
    Protect[prot];
    Protect[prot2];

(* Functions used in the post processing of the SplitPerturbations*)
$Rulecdh[h1_]:={
h1[-a_,b_] cd[a_][expr1_]:>cd[b][expr1],
h1[a_,b_] cd[-a_][expr1_]:>cd[b][expr1],
h1[b_,-a_] cd[a_][expr1_]:>cd[b][expr1],
h1[b_,a_] cd[-a_][expr1_]:>cd[b][expr1],
h1[-a_,b_] cd[c_]@cd[a_][expr1_]:>cd[c]@cd[b][expr1],h1[a_,b_] cd[c_]@cd[-a_][expr1_]:>cd[c]@cd[b][expr1],
h1[b_,-a_] cd[c_]@cd[a_][expr1_]:>cd[c]@cd[b][expr1],h1[b_,a_] cd[c_]@cd[-a_][expr1_]:>cd[c]@cd[b][expr1]};

$RulecdNSS[NSS1_]:={NSS1[-a_,b_] cd2[a_][expr1_]:>cd2[b][expr1],
NSS1[a_,b_] cd2[-a_][expr1_]:>cd2[b][expr1],
NSS1[b_,-a_] cd2[a_][expr1_]:>cd2[b][expr1],
NSS1[b_,a_] cd2[-a_][expr1_]:>cd2[b][expr1],
NSS1[-a_,b_] cd2[c_]@cd2[a_][expr1_]:>cd2[c]@cd2[b][expr1],
NSS1[a_,b_] cd2[c_]@cd2[-a_][expr1_]:>cd2[c]@cd2[b][expr1],
NSS1[b_,-a_] cd2[c_]@cd2[a_][expr1_]:>cd2[c]@cd2[b][expr1],
NSS1[b_,a_] cd2[c_]@cd2[-a_][expr1_]:>cd2[c]@cd2[b][expr1]};

    
    
    
    (*The default positionof indices for the extrinsic curvature and the acceleration is down*)
    (SlotsOfTensor[#] ^:= {-Tangent[Manifold], -Tangent[Manifold]}) & /@ {ExtrinsicK[h],ExtrinsicK[NSS]};
    (SlotsOfTensor[#] ^:= {-Tangent[Manifold]}) & /@ {Acceleration[u],Acceleration[n]};
    
    (*The acceleration of ushould vanish for homogeneous spacetimes.*)
    Acceleration[u][ind1_] = 0;

    (* And it should be of unit norm or at least the norm specified by the user *)
    AutomaticRules[u, MakeRule[{u[ind1] u[-ind1], normu}]];
    AutomaticRules[u, MakeRule[{u[-ind1] g[ind1, ind2], u[ind2]}]];
   
    
    (* And similarly for n where the norm should also be unity or the one specified.*)
    Acceleration[n][ind1_] = 0;
    AutomaticRules[n, MakeRule[{n[ind1] n[-ind1], normn}]];
    AutomaticRules[n, MakeRule[{n[-ind1] g[ind1, ind2], n[ind2]}]];
   
    (*Rules for the antisymmetric tensor and its projected version *)
    (* Currently not implemented on the sphere, but we should ! TODO*)  
    If[IntegerQ@dim && dim >= 2, 
      indsdim = GetIndicesOfVBundle[Tangent@Manifold, dim, {ind5}];
      AutomaticRules[epsilon[g], MakeRule[
        Evaluate[{epsilon[g]@@indsdim u[-indsdim[[1]]] h[-indsdim[[2]], ind5],
                  ReplaceIndex[Evaluate[epsilon[g] @@ indsdim],indsdim[[2]] -> ind5] u[-indsdim[[1]]]}]
     ]];];

(*We specify the spacetime. Here it is stollent from basic 1+3*)

(DefScreenProjectedTensor[#[[1]],NSS,SpaceTimesOfDefinition->{"Background"},TensorProperties->{"Traceless","Transverse","SymmetricTensor"},PrintAs->#[[2]]])&/@$ListFieldsBackgroundOnly[h];

ah::usage=a::usage;
Hh::usage=H::usage;

(* Patch to have a nice output for the Hubble factor *)
Hh/:PrintAs[Hh]=.;
PrintAs[Hh]^:=If[$ConformalTime,"\[ScriptCapitalH]","H"];

Unprotect[NoScalar];
(* We know it is safe to remove the scalar heads on scale factors and Hubble factors, because we shall never replace a Hubble factor nor a scale factor by something else which is not a pure scalar field...*)
NoScalar[Power[Scalar[Hh[LI[0],LI[0],LI[0]]],ni_Integer]]:=Power[Hh[LI[0],LI[0]],ni];
NoScalar[Power[Scalar[ah[LI[0],LI[0],LI[0]]],ni_Integer]]:=Power[ah[LI[0],LI[0]],ni];
Protect[NoScalar];

If[SpaceTimeType==="Minkowski",ah[LI[0],LI[0],LI[0]]=1;Hh[LI[0],LI[0],LI[0]]=0;,
ah[LI[0],LI[1],LI[0]]:=Hh[LI[0],LI[0],LI[0]]ah[LI[0],LI[0],LI[0]];
ah[LI[0],LI[q_?((IntegerQ[#]&&#>=2)&)],LI[0]]:=NoScalar@org@Nest[LieD[u[ind1]][#]&,ah[LI[0],LI[0],LI[0]],q];
DefConformalMetric[g,ah];
];

(* Obvious. Should be automatic in xPert*)
cd[_][$PerturbationParameter]=0;
cd2[_][$PerturbationParameter]=0;

(* The vector used for the background slicing is indeed background so should not be perturbed *)
(* However we want to be able to perturb the normal vector to constan time hypersurfaces.*)
(* In order to do so, we will use the vector \[ScriptCapitalN][h][\[Mu]] which is equal to the background normal vector n^\[Mu].
Howeverm it is ano rule attached to it, so it can be perturbed. Its perturbation is then d\[ScriptCapitalN][LI[p],\[Mu]] *)
(* See the section devoted to the perturbation of the normal vector for more explanations*)
Perturbation[u[ind1_],ni_]^:=0/;ni>=1;


(* Lie Derivatives of metric with up indices should be automatic*)
AutomaticRules[g,BuildRule[Evaluate[{LieD[u[dummy]][g[ind1,ind2]],LieD[u[dummy]][g[ind1,ind2]]//MetricToProjector[#,h]&}],MetricOn->None]];
AutomaticRules[g,BuildRule[Evaluate[{LieD[u[dummy]][g[-ind1,-ind2]],LieD[u[dummy]][g[-ind1,-ind2]]//MetricToProjector[#,h]&}],MetricOn->None]];


Which[
FlatSpaceBool[SpaceTimeType],
CSh[ind1_,ind2_,ind3_]=0;
Riemann[cd][i1_,i2_,i3_,i4_]=0;
Ricci[cd][i1_,i2_]=0;
RicciScalar[cd][]=0;,

CurvedSpaceBool[SpaceTimeType],
DefTensor[\[ScriptK][h][],{Manifold},PrintAs->StringJoin["\[ScriptK]"(*,ToString[h]*)]];

CD[ind1_][\[ScriptK][h][]]:=-1*(-2/3)*u[ind1]\[ScriptK][h][]CD[-ind2][u[ind2]]; (* This is because Subscript[\[ScriptCapitalL], u](\[ScriptK]^(1/2) Subscript[\[Epsilon]^\[Mu], \[Nu]\[Sigma]]) must be zero since Subscript[\[ScriptCapitalL], u](Subscript[C^\[Mu], \[Nu]\[Sigma]])=0*)
(* Given that we first work on the conformal metric where the trace of the extrinsic curvature is 0, then this point does not matter at all for us.*)
cd[ind1_][\[ScriptK][h][]]=0;
If[SpaceTimeType==="FLCurved",
IndexSet[Riemann[cd][i1_,i2_,i3_,i4_],\[ScriptK][h][](h[i1,i3]h[i2,i4]-h[i1,i4]h[i2,i3])];
IndexSet[Ricci[cd][i1_,i2_],\[ScriptK][h][]h[i1,i2](h[i3,-i3]-1)];
IndexSet[RicciScalar[cd][],\[ScriptK][h][]h[i1,-i1](h[i3,-i3]-1)];
];
];

(* We replace the extrinsic curvature with an adhoc tensor which can have derivatives label indices*)
DefScreenProjectedTensor[K[h][-ind1,-ind2],NSS,TensorProperties->{"SymmetricTensor","Traceless"},SpaceTimesOfDefinition->{"Background"},PrintAs->"K"];
ExtrinsicK[h][i1_,i2_]:=If[$ConformalTime,1,a[h][]]*K[h][LI[0],LI[0],LI[0],i1,i2];

(*But what we do is that we set it to zero automatically ! SO this is ridiculous TODO clean*)
ExtrinsicK[h][i1_,i2_]=0;
Evaluate[K[h]][LI[0],LI[0],i1_,i2_]=0;

(* Commutation of Lie and Partial derivatives. Very important here. See draft for the formula which is implemented...*)
(* But for FL it is ultra trivial*)
Unprotect[LieD];

LieD[u[ind1_]][cd[ind2_][cd[-ind2_][expr1_]]]:=Module[{dum},dum=DummyIn[Tangent[Manifold]];
ContractMetric[LieD[u[ind1]][g[dum,ind2]]cd[-dum][cd[-ind2][expr1]]
+g[dum,ind2]LieD[u[ind1]][cd[-dum][cd[-ind2][expr1]]]]
];

LieD[u[ind1_]][cd[-ind2_][cd[ind2_][expr1_]]]:=Module[{dum},dum=DummyIn[Tangent[Manifold]];
ContractMetric[LieD[u[ind1]][g[dum,ind2]]cd[-dum][cd[-ind2][expr1]]
+g[dum,ind2]LieD[u[ind1]][cd[-dum][cd[-ind2][expr1]]]]
];

LieD[u[ind1_]][cd[ind2_][expr1_]]:=LieD[u[ind1]][IndicesDown[cd[ind2][expr1] ] ]/;Length[IndicesOf[Free,Up][cd[ind2][expr1]]]=!=0&&OrthogonalToVectorQ[u][expr1]&&Abs[u[ind1]u[-ind1]]===1;

LieD[u[ind1_]][cd[ind2_?DownIndexQ][expr1_]]:=Module[{dum},dum=DummyIn[Tangent[Manifold]];
With[{frees=FindFreeIndices[expr1]},
ToCanonical[
(cd[ind2][LieD[u[ind1]][expr1]]
+$ExtrinsicKSign *Plus@@(
(-cd[#][ExtrinsicK[h][ind2,dum]]ReplaceIndex[expr1,#->-dum]
+cd[dum][ExtrinsicK[h][#,ind2]]ReplaceIndex[expr1,#->-dum]
-cd[ind2][ExtrinsicK[h][dum,#]]ReplaceIndex[expr1,#->-dum])&/@frees)),UseMetricOnVBundle->None]]]
/;Length[IndicesOf[Free,Up][expr1]]===0&&OrthogonalToVectorQ[u][expr1]&&Abs[u[ind1]u[-ind1]]===1;

Protect[LieD];


(* TODO Clean abive and keep only the stuff which is necessary *)

]]]


(*SetSlicingUpToScreenSpace[g_?MetricQ,u_,normu_:-1,h_,cd_,{cdpost_String,cdpre_String},n_,normn_:1,NSS_,cd2_,{cd2post_String,cd2pre_String}]:=Module[{m,p,q,DummyS,DummyV,DummyT,ui,indsdimminustwo,indsdim,dim,prot,Silenth},
With[{Manifold=ManifoldOfCovD@CovDOfMetric[g],CD=CovDOfMetric[g]},
dim=DimOfManifold[Manifold];

With[{ind1=DummyIn[Tangent[Manifold]],ind2=DummyIn[Tangent[Manifold]],ind3=DummyIn[Tangent[Manifold]],ind4=DummyIn[Tangent[Manifold]],ind5=DummyIn[Tangent[Manifold]],ind6=DummyIn[Tangent[Manifold]],ind7=DummyIn[Tangent[Manifold]],i1=DummyIn[Tangent[Manifold]],i2=DummyIn[Tangent[Manifold]],i3=DummyIn[Tangent[Manifold]],i4=DummyIn[Tangent[Manifold]],i5=DummyIn[Tangent[Manifold]],dummy=DummyIn[Tangent[Manifold]]},



DefTensor[u[-ind1],{Manifold},PrintAs->"\!\("<>ToString[ind1]<>"\&-\)"]
        
(*Induced Metric *)
Off[DefMetric::old];
DefMetric[1,h[-ind1,-ind2],cd,{cdpost,cdpre},InducedFrom->{g,u},PrintAs->"\!\("<>ToString[h]<>"\&-\)"];
(*Another induced metric, I used the cd for the angular derivative, it is cheating I will sort it later*)

DefTensor[n[-ind1],{Manifold},OrthogonalTo->{u[ind1]},ProjectedWith->{h[ind1,-ind2]},PrintAs->"\!\("<>ToString[n]<>"\&-\)"];

DirectionVectorQ[n]=True;


(* I use NSS as the screen space metric because the Silent metric is 3-D, I will clean up these later*)
(* CP: OK Obinna I see what you do !*)
DefTensor[NSS[-ind1,-ind2],{Manifold},Symmetric[{-ind1,-ind2}],OrthogonalTo->{u[ind1],u[ind2],n[ind1],n[ind2]},ProjectedWith->{h[ind1,-ind4],h[ind2,-ind5](*,NSS[ind1,-ind4],NSS[ind2,-ind5]*)},PrintAs->"\!\("<>ToString[NSS]<>"\&-\)"];

(* So let me try to define separately the CovD, So That I suppress this definition *)
(*DefMetric[1,Silenth[-ind1,-ind2],cd2,{cd2post,cd2pre},InducedFrom->{g,n},PrintAs->"\!\("<>ToString[h]<>"\&-\)"];*)

(* CP: Let me try this implementation for the CovD twice projected*)
(* This seems cleaner than to define a Silent Metric.*)

DefCovD[cd2[-ind1],{cd2post,cd2pre}];
cd2[ind1_][NSS[ind2_,ind3_]]:=0;
AutomaticRules[NSS,BuildRule[{NSS[ind1,ind2] n[-ind2],0}]];
AutomaticRules[NSS,BuildRule[{NSS[ind1,ind2] u[-ind2],0}]];

(*I used AutomaticRule to assign rules to NSS...*)
(* Well it doesn't work well*)
(*NSS[-ind1,-ind2]^:=2/;ind1+ind2==0;
NSS[-ind1,-ind2]NSS[ind1,ind2]^:=2;*)

(*AutomaticRules[NSS,BuildRule[{NSS[-ind1,-ind2],h[-ind1,-ind2]-n[-ind1]n[-ind2]}]]*)AutomaticRules[NSS,BuildRule[{NSS[ind1,ind2] NSS[-ind2,-ind3],NSS[ind1,-ind3]}]];
AutomaticRules[NSS,BuildRule[{NSS[-ind1,-ind2] NSS[ind2,ind3],NSS[-ind1,ind3]}]];
AutomaticRules[NSS,BuildRule[{NSS[-ind1,ind1] ,dim-2}]];
(* Who knows we might allow for 1+1+n splitting so here that should be n-2.*)

On[DefMetric::old];
(*We remove automatic Leibniz rule when there is a Scalar Head.This is to ensure that the induced derivative does not spoil an'InducedDecomposition'*)
prot=Unprotect[cd];
cd[a_][Scalar[expr_]]=.;
cd2[a_][Scalar[expr_]]=.;
Protect[prot];

(* CP. Do you remember why we had this? *)
(*OU: Yes it is used in DefTensorProperties for Post-Processing*)
$Rulecdh[h1_]:={
h1[-a_,b_] cd[a_][expr1_]:>cd[b][expr1],
h1[a_,b_] cd[-a_][expr1_]:>cd[b][expr1],
h1[b_,-a_] cd[a_][expr1_]:>cd[b][expr1],
h1[b_,a_] cd[-a_][expr1_]:>cd[b][expr1],
h1[-a_,b_] cd[c_]@cd[a_][expr1_]:>cd[c]@cd[b][expr1],h1[a_,b_] cd[c_]@cd[-a_][expr1_]:>cd[c]@cd[b][expr1],
h1[b_,-a_] cd[c_]@cd[a_][expr1_]:>cd[c]@cd[b][expr1],h1[b_,a_] cd[c_]@cd[-a_][expr1_]:>cd[c]@cd[b][expr1]};

$RulecdNSS[NSS1_]:={NSS1[-a_,b_] cd2[a_][expr1_]:>cd2[b][expr1],
NSS1[a_,b_] cd2[-a_][expr1_]:>cd2[b][expr1],
NSS1[b_,-a_] cd2[a_][expr1_]:>cd2[b][expr1],
NSS1[b_,a_] cd2[-a_][expr1_]:>cd2[b][expr1],
NSS1[-a_,b_] cd2[c_]@cd2[a_][expr1_]:>cd2[c]@cd2[b][expr1],NSS1[a_,b_] cd2[c_]@cd2[-a_][expr1_]:>cd2[c]@cd2[b][expr1],NSS1[b_,-a_] cd2[c_]@cd2[a_][expr1_]:>cd2[c]@cd2[b][expr1],NSS1[b_,a_] cd2[c_]@cd2[-a_][expr1_]:>cd2[c]@cd2[b][expr1]};





(*SpaceType[h]^=SpaceTimeType;*)

(*The default positionof indices for the extrinsic curvature and the acceleration is down*)
(* CP This could be rewritten in a more compact form gathering n and u, h and silenth*)

(SlotsOfTensor[#]^:={-Tangent[Manifold],-Tangent[Manifold]})&/@{ExtrinsicK[h]};
(SlotsOfTensor[#]^:={-Tangent[Manifold]})&/@{Acceleration[u]};


(SlotsOfTensor[#]^:={-Tangent[Manifold],-Tangent[Manifold]})&/@{ExtrinsicK[Silenth]};
(SlotsOfTensor[#]^:={-Tangent[Manifold]})&/@{Acceleration[n]};

(*The acceleration should vanish for homogeneous spacetimes.*)

Acceleration[u][ind1_]=0;
AutomaticRules[u,BuildRule[{u[ind1] u[-ind1],normu}]];
AutomaticRules[u,BuildRule[{u[-ind1] g[ind1,ind2],u[ind2]}]];
(*AutomaticRules[u,BuildRule[{g[ind1,ind2] u[-ind2] u[-ind1],normu}]];*)


(* CP Here it is because we assume non Binachi for n. Otherwise this is more general probably. Even if we now we specialize to FL, the 1+1+2 splitting would be great if it could be as general as possible. So here we should extend this definition and have it restricted to 0 only if the TypeOfPScaetime is non Bianchi.*)
Acceleration[n][ind1_]=0;
AutomaticRules[n,BuildRule[{n[ind1] n[-ind1],normn}]];
AutomaticRules[n,BuildRule[{n[-ind1] g[ind1,ind2],n[ind2]}]];
(*AutomaticRules[n,BuildRule[{g[ind1,ind2] n[-ind2] n[-ind1],normn}]];*)


If[IntegerQ@dim&&dim>=2,indsdim=GetIndicesOfVBundle[Tangent@Manifold,dim,{ind5}];
AutomaticRules[epsilon[g],BuildRule[Evaluate[{epsilon[g]@@indsdim u[-indsdim[[1]]] h[-indsdim[[2]],ind5],ReplaceIndex[Evaluate[epsilon[g]@@indsdim],indsdim[[2]]->ind5] u[-indsdim[[1]]]}]]];
];
]
]
];
*)


ToInducedDerivativeScreenSpace[expr_,supercd_,cd_]:=ToInducedDerivative[expr,supercd,cd]

ToInducedDerivativeScreenSpace[expr_,supercd_,cd_,cd2_]:=expr/.supercd[ind_][expr1:(_?xTensorQ[___]|_?InertHeadQ[___]|cd[_][_]|LieD[_][_])]:>-cd[ind][expr1]+
With[{frees=FindFreeIndices[expr1],n=Last@InducedFrom[MetricOfCovD[cd2]]},ToInducedDerivative[supercd[ind][expr1],supercd,cd]+ToInducedDerivative[cd[ind][expr1],cd,cd2]
/.LieD[n[a_]][expr1]:>LieDToCovD[LieD[n[a]][expr1],cd]
]


Options[DefScreenProjectedTensor]={PrintAs->Identity,TensorProperties->{"SymmetricTensor","Traceless","Transverse"},SpaceTimesOfDefinition->{"Background","Perturbed"}};

DefScreenProjectedTensorQ[Name_,N___]:=False;
PropertiesList[Name_]:={};
InducedMetricOf[Name_]:={};

(*Review all these properties.*)

DefScreenProjectedTensor[Name_[inds___],N_?InducedMetricQ,options___?OptionQ]:=Catch@Module[{IndsNoLI,p,q,r,PrAs,SpaTimeDef,TensProp},With[{M=ManifoldOfCovD@CovDOfMetric[First@InducedFrom@First@InducedFrom[N]],n=Last@InducedFrom[N],
u=Last@InducedFrom@First@InducedFrom@N,
h=First@InducedFrom@N},
With[{Dummy1=DummyIn[Tangent[M]],Dummy2=DummyIn[Tangent[M]]},

(* Messages *)
(If[DefScreenProjectedTensorQ[Name,N],If[$DefInfoQ,Throw@Print["** DefScreenProjectedTensor: The projection properties on the Screen space associated with the induced metric ",N," and direction vector",n," have already been defined for the tensor ",Name,"."],Throw[Null]];];
If[DefScreenProjectedTensorQ[Name],If[$DefInfoQ,Print["** DefScreenProjectedTensor: Projection properties for the tensor ",Name," have been defined for another slicing. New projection properties on the hypersurfaces associated with the induced metric",N," and direction vector",n," are now added."]];];

IndsNoLI=Select[{inds},Not@LIndexQ[#]&];

If[(Length[IndsNoLI]>=1)&&(Not@AnyIndicesListQ[IndsNoLI])&&(Select[IndsNoLI,UpIndexQ]=!={}),Throw[Message[DefScreenProjecteTensor::notdownindices,Name]]];
(**********The following Message is not yet defined.**********)
If[(Length[IndsNoLI]>=2)&&(AnyIndicesListQ[IndsNoLI]),Throw[Message[DefScreenProjectedTensor::invalidanyindices,Name]]];

PrAs=PrintAs/.CheckOptions[options]/.Options[DefScreenProjectedTensor];
SpaTimeDef=SpaceTimesOfDefinition/.CheckOptions[options]/.Options[DefScreenProjectedTensor];
TensProp=TensorProperties/.CheckOptions[options]/.Options[DefScreenProjectedTensor];

If[DefScreenProjectedTensorQ[Name]||DefTensorQ[Name],If[$DefInfoQ,Print["** DefScreenProjectedTensor: The tensor ",Name," already exists. The projection properties on the hypersurfaces associated with the induced metric ",N," are now defined."]],


(* Actual definition of the projected tensor *)
DefTensor[Name[LI[p],LI[q],LI[r],IndsNoLI/.List->Sequence],M,Symmetric[IndsNoLI],PrintAs->PrAs]
];


(*Definition of the projection properties for the tensor'Name'.*)
If[Not@AnyIndicesListQ[IndsNoLI],DefProjectedTensorProperties[Name,IndsNoLI/.List->Sequence,N,TensProp,SpaTimeDef],{}(*DefProjectedTensorPropertiesAnyIndices[Name,N,TensProp,SpaTimeDef]*)
(* TODO implement in the case of tensor with non fixed number of indices.*)
];

Name/:OrthogonalToVectorQ[n][Name]=True;
Name/:OrthogonalToVectorQ[u][Name]=True;
)]]]

SetNumberOfArguments[DefScreenProjectedTensor,{3,Infinity}]
Protect[DefScreenProjectedTensor];


(***MODULE:DefProjectedTensorProperties***)DefProjectedTensorProperties[Name_,inds___?DownIndexQ,N_?InducedMetricQ,Properties_List,Spacetimes_List]:=Catch@Module[{prot,Lengthindices},With[{h=First@InducedFrom@N,g=First@InducedFrom@First@InducedFrom@N,u=Last@InducedFrom@First@InducedFrom@N,n=Last@InducedFrom@N},

With[{cd1=CovDOfMetric[h],cd2=CovDOfMetric[N],M=ManifoldOfCovD[CovDOfMetric[g]],SymmetricBool=(Cases[Properties,"SymmetricTensor"]==={"SymmetricTensor"}),TracelessBool=(Cases[Properties,"Traceless"]==={"Traceless"}),TransverseBool=(Cases[Properties,"Transverse"]==={"Transverse"}),BackgroundBool=(Cases[Spacetimes,"Background"]==={"Background"}),PerturbedBool=(Cases[Spacetimes,"Perturbed"]==={"Perturbed"}),ToCan=ToCanonical[#,UseMetricOnVBundle->None]&},

If[$DebugInfoQ,
Print["Calling DefProjectedTensorProperties"]];

If[Not[SymmetricBool]&&(Length[{inds}]>=2),Throw@Message[DefProjectedTensorProperties::symmetrictensors]];
DefScreenProjectedTensorQ[Name,N]^=True;
InducedMetricOf[Name]^=N;

If[DefScreenProjectedTensorQ[Name]===False,PropertiesList[Name]^=Join[Properties,Which[Length[{inds}]===0,{"Scalar"},Length[{inds}]===1,{"Vector"},Length[{inds}]>=2,{"Tensor"}]];

Name[indices___?AIndexQ]:=Name[LI[0],LI[0],LI[0],indices]/;(Length[{indices}]===Length[{inds}]);

Name[LI[p_?((IntegerQ[#]&&#>=0)&)],indices___?AIndexQ]:=Name[LI[p],LI[0],LI[0],indices]/;(Length[{indices}]===Length[{inds}]);

(*For tensors of rank larger than or equal to 2,the following rules provide the traceless property.*)If[(Length[{inds}]>=2)&&TracelessBool,Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,Dum_,indices2___,-Dum_,indices3___]:=0/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,-Dum_,indices2___,Dum_,indices3___]:=0/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

(*Then the trace of a derivative is not the derivative of the trace and there are commutation rules. TODO check that it is correct.*)(*Up down case*)
(* What about the third derivative here ?????*)(* TODO check if this is correct. *)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum_,indices2___,-Dum_,indices3___]:=
Module[{Dummy1,Dummy2},Dummy1=DummyIn[Tangent[M]];Dummy2=DummyIn[Tangent[M]];

If[$ConformalTime,1,1/a[h][]]*(LieD[u[Dummy1]][ToCan[Name[LI[p],LI[q-1],LI[r],indices1,Dum,indices2,-Dum,indices3]]]+2*Name[LI[p],LI[q-1],LI[r],indices1,-Dummy1,indices2,-Dummy2,indices3] ExtrinsicK[h][Dummy1,Dummy2])]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

(* Down up case is the same but we need to give the two cases*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&),LI[r_?((IntegerQ[#]&&#>=1)&)]],indices1___,-Dum_,indices2___,Dum_,indices3___]:=Module[{Dummy1,Dummy2},Dummy1=DummyIn[Tangent[M]];Dummy2=DummyIn[Tangent[M]];

If[$ConformalTime,1,1/a[h][]]*(LieD[u[Dummy1]][ToCan[Name[LI[p],LI[q-1],LI[r],indices1,Dum,indices2,-Dum,indices3]]]+2*Name[LI[p],LI[q-1],LI[r],indices1,-Dummy1,indices2,-Dummy2,indices3] ExtrinsicK[h][Dummy1,Dummy2])]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);
];


PerturbationOrder[Name[LI[0],LI[q_],LI[r_],indices___]]^:=Catch@Module[{},
If[Length[{indices}]=!=Length[{inds}],Throw[Print["** Warning: The number of indices for the tensor ",Name," is incorrect."]]];

If[Cases[AIndexQ/@{indices},False]=!={},Throw[Print["** Warning: The indices of the tensor ",Name," have to be abstract indices."]]];

If[(IntegerQ[q]&&q>=0),0,(*Throw[Print["** Warning: The second label-index has to be a positive integer."]]]*)If[NumericQ[q],Throw[Print["** Warning: The second label-index has to be a positive integer."]]]];

If[(IntegerQ[r]&&r>=0),0,If[NumericQ[r],Throw[Print["** Warning: The Third label-index has to be a positive integer."]]]]];


(*TO DO:Here,we have to comment on the commutation between perturbing and Lie deriving.This commutation stems from the fact that the Lie derivative is a background Lie derivative.*)If[PerturbedBool,(*For any perturbed tensors,we have:*)PerturbationOrder[Name[LI[p_],LI[q_],LI[r_],indices___]]^:=Catch@Module[{},
If[Length[{indices}]=!=Length[{inds}],Throw[Print["** Warning: The number of indices for the tensor ",Name," is incorrect."]]];

If[Cases[AIndexQ/@{indices},False]=!={},Throw[Print["** Warning: The indices of the tensor ",Name," have to be abstract indices."]]];

If[(IntegerQ[p]&&p>=1)&&(IntegerQ[q]&&q>=0)&&(IntegerQ[r]&&r>=0),p,(*Throw[Print["** Warning: The label-indices have to be positive integers."]]]*)

If[NumericQ[p]&&NumericQ[q]&&NumericQ[r],Throw[Print["** Warning: The label-indices have to be positive integers."]]]]];

(*(the rule for'p=0' is defined above)*)(*and for perturbed scalar quantities,we have:*)Perturbation[Name[LI[p_],LI[q_],LI[r_]]]^:=Catch@If[(IntegerQ[p]&&p>=0)&&(IntegerQ[q]&&q>=0)&&(IntegerQ[r]&&r>=0),Name[LI[p+1],LI[q],LI[r]],Throw[Print["** Warning: The label-indices have to be positive integers."]]];

Perturbation[Name[LI[p_],LI[q_],LI[r_]],PertOrder_]^:=Catch@Module[{},
If[Not[IntegerQ[PertOrder]],Throw[Print["** Warning: The order of the perturbation has to be an integer."]]];

If[(IntegerQ[p]&&p>=0)&&(IntegerQ[q]&&q>=0)&&(IntegerQ[r]&&r>=0),Name[LI[p+PertOrder],LI[q],LI[r]],Throw[Print["** Warning: The label-indices have to be positive integers."]]]];
];


(*For tensors living on the background only, we have:*)If[BackgroundBool&&Not[PerturbedBool],Perturbation[Name[LI[0],LI[q_],LI[r_],indices___],PertOrder_]^:=Catch@Module[{},
If[Length[{indices}]=!=Length[{inds}],Throw[Print["** Warning: The number of indices for the tensor ",Name," is incorrect."]]];

If[Cases[AIndexQ/@{indices},False]=!={},Throw[Print["** Warning: The indices of the tensor ",Name," have to be abstract indices."]]];

If[Not[IntegerQ[q]&&q>=0],Throw[Print["** Warning: The second label-index has to be a positive integer."]]];

If[PertOrder===0,Name[LI[0],LI[q],LI[r],indices],If[(IntegerQ[PertOrder]&&PertOrder>=1),0,Throw[Print["** Warning: The order of the perturbation has to be a positive integer."]]]]];


Perturbation[Name[LI[0],LI[q_],LI[r_],indices___]]^:=Catch@Module[{},
If[Length[{indices}]=!=Length[{inds}],Throw[Print["** Warning: The number of indices for the tensor ",Name," is incorrect."]]];

If[Cases[AIndexQ/@{indices},False]=!={},Throw[Print["** Warning: The indices of the tensor ",Name," have to be abstract indices."]]];

If[IntegerQ[q]&&q>=0,0,Throw[Print["** Warning: The second label-index has to be a positive integer."]]];

If[IntegerQ[r]&&r>=0,0,Throw[Print["** Warning: The third label-index has to be a positive integer."]]]];
];


(*For pure perturbations (i.e.for tensors without background values),we have:*)If[Not[BackgroundBool]&&PerturbedBool,(*This is the 0.4.0 version way to do it.We define a delayed 0 value for the background*)(*However this is problematic when we want to perturb.Because then when we perturb this quantity*)(*we write Perturbed[quantity] but Mathematica will read Perturbed[0],and so this leads to 0.*)(*Instead we should append this to a list of rules,that should be applied in SplitPerturbations*)(*The easiest way is to define a set of global rules and to append a new rule each time there is a tensor vanishing on the background*)(*Old implementation*)(*Name[LI[0],LI[q_?((IntegerQ[#]&&#>=0)&)],indices___?AIndexQ]:=0/;(Length[{indices}]===Length[{inds}]);*)

(*New implementation*)
Lengthindices=Length[{inds}];
$RulesVanishingBackgroundFields[N]=Append[$RulesVanishingBackgroundFields[N],Name[LI[0],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices___?AIndexQ]:>0/;(Length[{indices}]===Lengthindices)];

DefScreenProjectedTensorQ[Name]^=True;
];

PropertiesList[Name]^=Join[PropertiesList[Name],Which[Length[{inds}]===1&&TransverseBool,{"SVT-Vector associated with the induced metric " N ""},Length[{inds}]>=2&&SymmetricBool&&TracelessBool&&TransverseBool,{"SVT-Tensor associated with the induced metric " N ""},Length[{inds}]>=0,{}]];


(*'SVT-Vector' is a vector satisfying the SVT-decomposition properties (hence it is transverse).'SVT-Tensor' is a tensor satisfying the SVT-decomposition properties (hence it is symmetric,traceless and transverse).*)

(*The Lie derivative for tensors with indices down is represented by the second label-index.*)Name/:LieD[u[Dum_]][Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&),LI[r_?((IntegerQ[#]&&#>=0)&)]],indices___?DownIndexQ]]:=
If[$ConformalTime,1,a[h][]]*Name[LI[p],LI[q+1],LI[r],indices]/;(Length[{indices}]===Length[{inds}]);

(*(*For tensors of rank larger than or equal to 1,*)
If[Length[{inds}]>=1,Name/:OrthogonalToVectorQ[u][Name]=True;
(* Already set above *)
*)


(*Projection conditions*)(*The contraction with the vector normal to the hypersurfaces gives (since the tensor is projected):*)
(*Projection orthogonal to u*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,Dum_,indices2___] u[-Dum_]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,-Dum_,indices2___] u[Dum_]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

(*Projection orthogonal to n*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,Dum_,indices2___] n[-Dum_]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,-Dum_,indices2___] n[Dum_]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*And the action of the projector onto the hypersurfaces is an invariant operation:*)(*However this is left to post processing that's why we load this rule into $Rulecdh and $RulecdNSS*)$Rulecdh[h]=Append[$Rulecdh[h],Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,Dum1_,indices2___] h[-Dum1_,-Dum2_]:>Name[LI[p],LI[0],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}])];

$Rulecdh[h]=Append[$Rulecdh[h],Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,-Dum1_,indices2___] h[Dum1_?UpIndexQ,Dum2_?UpIndexQ]:>Name[LI[p],LI[0],indices1,Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}])];


(*OU:I think some of these had been implemeted in the DefScreenSpaceMetric*)$RulecdNSS[N]=Append[$RulecdNSS[N],Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,Dum1_,indices2___] N[-Dum1_,-Dum2_]:>Name[LI[p],LI[0],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}])];


$RulecdNSS[N]=Append[$RulecdNSS[N],Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,-Dum1_,indices2___] N[Dum1_?UpIndexQ,Dum2_?UpIndexQ]:>Name[LI[p],LI[0],indices1,Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}])];

(* Projection rules with respect to the screen space metric*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,Dum1_,indices2___] N[-Dum1_,Dum2_?UpIndexQ]:=Name[LI[p],LI[0],LI[0],indices1,Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,Dum1_,indices2___] N[Dum2_?UpIndexQ,-Dum1_]:=Name[LI[p],LI[0],LI[0],indices1,Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,-Dum1_,indices2___] N[Dum1_,-Dum2_]:=Name[LI[p],LI[0],LI[0],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[0],LI[0],indices1___,-Dum1_,indices2___] N[-Dum2_,Dum1_]:=Name[LI[p],LI[0],LI[0],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*When there are Lie derivatives, N contracted automatically only when the free index is down.Otherwise it requires ContractMetric to perform contraction*)
(* Is it correct in general or just because we know that the background is FL?*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum1_,indices2___] N[-Dum1_,-Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum1_,indices2___] N[-Dum2_,-Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,-Dum1_,indices2___] N[Dum1_,-Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,-Dum1_,indices2___] N[-Dum2_,Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*When there are Lie derivatives,h contracted automatically only when the free index is down.Otherwise it requires ContractMetric to perform contraction*)Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum1_,indices2___] h[-Dum1_,-Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum1_,indices2___] h[-Dum2_,-Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,-Dum1_,indices2___] h[Dum1_,-Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,-Dum1_,indices2___] h[-Dum2_,Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum2,indices2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*g converted to h when contracted with a projected tensor.It is made automatic*)
(* CP: TODO: And why not to the screen space metric directly ???*)
(* CP I will modify this and put N instead of h*)
Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,Dum1_,indices2___] g[-Dum1_,Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,Dum1,indices2] N[-Dum1,Dum2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,Dum1_,indices2___] g[Dum2_,-Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,Dum1,indices2] N[Dum2,-Dum1]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,-Dum1_,indices2___] g[Dum1_,Dum2_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum1,indices2] N[Dum1,Dum2]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___,-Dum1_,indices2___] g[Dum2_,Dum1_]:=Name[LI[p],LI[q],LI[r],indices1,-Dum1,indices2] N[Dum2,Dum1]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

(*If the tensor belongs (at least) to the perturbed manifold,and if it is tranverse,*)If[PerturbedBool&&TransverseBool,(*(transverse property)*)(* CP SO here Transverse means tranverse with respect to the cd2 derivative associated with the screen space metric.*)Name/:cd2[Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[0],LI[0],indices1___,-Dum_,indices2___]]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);

Name/:cd2[-Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[0],LI[0],indices1___,Dum_,indices2___]]:=0/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*then the first rule:D^aSubscript[\[ScriptCapitalL],n] Subscript[T,a...]=Subscript[\[ScriptCapitalL],n](D^aSubscript[T,a...])-Subscript[\[ScriptCapitalL],n](g^ab)Subscript[D,b]Subscript[Subscript[T,a],...]+(g^ab)[Subscript[D,b],Subscript[\[ScriptCapitalL],n]]Subscript[T,a...]*)

Name/:cd2[Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___?DownIndexQ,-Dum_,indices2___?DownIndexQ]]:=Module[{Dummy1,Dummy2},Dummy1=DummyIn[Tangent[M]];Dummy2=DummyIn[Tangent[M]];

ToCan@ContractMetric[If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][cd2[Dum][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]]-ToCan[If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][g[Dum,Dummy2]] cd2[-Dummy2][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]//MetricToProjector[#,h]&//MetricToProjector[#,N]&]+g[Dum,Dummy2] ToCan[cd2[-Dummy2][Name[LI[p],LI[q],LI[r],indices1,-Dum,indices2]]-If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][cd2[-Dummy2][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]]]]]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*and the second rule:Subscript[D,a] Subscript[\[ScriptCapitalL],n]Subscript[T^a,...]=Subscript[\[ScriptCapitalL],n](D^aSubscript[T,a...])-Subscript[\[ScriptCapitalL],n](g^ab)Subscript[D,b]Subscript[Subscript[T,a],...]+(g^ab)[Subscript[D,b],Subscript[\[ScriptCapitalL],n]]Subscript[T,a...]*)Name/:cd2[-Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___?DownIndexQ,Dum_,indices2___?DownIndexQ]]:=Module[{Dummy1,Dummy2},Dummy1=DummyIn[Tangent[M]];
Dummy2=DummyIn[Tangent[M]];
ToCan@ContractMetric[If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][cd2[Dum][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]]-ToCan[If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][g[Dum,Dummy2]] cd2[-Dummy2][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]//MetricToProjector[#,h]&//MetricToProjector[#,N]&]+g[Dum,Dummy2] ToCan[cd2[-Dummy2][Name[LI[p],LI[q],LI[r],indices1,-Dum,indices2]]-If[$ConformalTime,1,1/a[h][]]*LieD[u[Dummy1]][cd2[-Dummy2][Name[LI[p],LI[q-1],LI[r],indices1,-Dum,indices2]]]]]]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);


(*If the indices are not down,we separate them.In practice this happens almost never...*)(*This is for the case where we have at least one derivative,for which the meaning is only when the index is down.*)

Name/:cd2[Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,indup_?UpIndexQ,indices3___,-Dum_,indices2___]]:=Module[{Dummy},Dummy=DummyIn[Tangent[M]];
g[indup,Dummy] cd2[Dum][Name[LI[p],LI[q],LI[r],indices1,-Dummy,indices3,-Dum,indices2]]]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

Name/:cd2[Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,-Dum_,indices3___,indup_?UpIndexQ,indices2___]]:=Module[{Dummy},Dummy=DummyIn[Tangent[M]];
g[indup,Dummy] cd2[Dum][Name[LI[p],LI[q],LI[r],indices1,-Dum,indices3,-Dummy,indices2]]]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

Name/:cd2[-Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,indup_?UpIndexQ,indices3___,Dum_,indices2___]]:=Module[{Dummy},Dummy=DummyIn[Tangent[M]];
g[indup,Dummy] cd2[-Dum][Name[LI[p],LI[q],LI[r],indices1,-Dummy,indices3,Dum,indices2]]]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);

Name/:cd2[-Dum_][Name[LI[p_?((IntegerQ[#]&&#>=1)&)],LI[q_?((IntegerQ[#]&&#>=1)&)],LI[r_?((IntegerQ[#]&&#>=1)&)],indices1___,Dum_,indices3___,indup_?UpIndexQ,indices2___]]:=Module[{Dummy},Dummy=DummyIn[Tangent[M]];
g[indup,Dummy] cd2[-Dum][Name[LI[p],LI[q],LI[r],indices1,Dum,indices3,-Dummy,indices2]]]/;(Length[Join[{indices1},{indices2},{indices3}]]+2===Length[{inds}]);];];


(*The following rule serves to express the three-covariant derivative of (homogeneous) background quantities in terms of the connection components.For instance,'Subscript[D,i] Subscript[\[Omega],j]' is replaced by:'-Subscript[\[CapitalGamma]^a,ij]Subscript[\[Omega],a]'.*)(*If[BackgroundBool,Name/:cd2[Dummy2_][Name[LI[0],LI[q_?((IntegerQ[#]&&#>=0)&)],indices___]]:=Module[{Dummy1},Dummy1=DummyIn[Tangent[M]];
ToCan[Plus@@((-Connection[h][Dummy1,Dummy2,#]ReplaceIndex[Evaluate[Name[LI[0],LI[q],indices]],#->-Dummy1])&/@{indices})]]/;(Length[{indices}]===Length[{inds}]);];*)(*Confer the function SetSlicing for the definition of'Connection' and its properties.*)(*Is the above relation correct for space-time indices?To check!*)(*What is the need for'Evaluate'?I forgot.*)



(*In principle,the following rule needs not to be used.*)(*However,it makes sure that,if something went wrong in our algorithm,and the Lie derivatives acts on a tensor with up indices,then this converted to down indices.*)
(*This ensures that the algorithm for splitting the covariant derivatives into induced derivatives and Lie derivative always works.*)
(* It puts down indices whenever it is up.*)
Name/:LieD[u[Dummy1_]][Name[LI[p_?((IntegerQ[#]&&#>=0)&)],LI[q_?((IntegerQ[#]&&#>=0)&)],LI[r_?((IntegerQ[#]&&#>=0)&)],indices1___?AIndexQ,IndexUp_?UpIndexQ,indices2___?AIndexQ]]:=Module[{Dum},Dum=DummyIn[Tangent[M]];
g[IndexUp,Dum] LieD[u[Dummy1]][Name[LI[p],LI[q],LI[r],indices1,-Dum,indices2]]+LieD[u[Dummy1]][g[IndexUp,Dum]] Name[LI[p],LI[q],LI[r],indices1,-Dum,indices2]]/;(Length[Join[{indices1},{indices2}]]+1===Length[{inds}]);]]
]


DefinedPerturbationParameter[x_]:=False;


(***BUILDING SYMBOLS:Geometrical quantities***)
a[symb_]:=SymbolJoin[a,symb];
H[symb_]:=SymbolJoin[H,symb];

Connection[symb_]:=SymbolJoin[Connection,symb];
CS[symb_]:=SymbolJoin[CS,symb];
nt[symb_]:=SymbolJoin[nt,symb];
av[symb_]:=SymbolJoin[av,symb];

K[symb_]:=SymbolJoin[K,symb];
\[ScriptK][symb_]:=SymbolJoin[\[ScriptK],symb];

(***BUILDING SYMBOLS:Fluid quantities***)

\[Rho][symb_]:=SymbolJoin[\[Rho],symb];
P[symb_]:=SymbolJoin[P,symb];
(*\[CapitalPi][symb_]:=SymbolJoin[\[CapitalPi],symb];*)

(***BUILDING SYMBOLS:Perturbed fluid four-velocity***)

V0[N_?InducedMetricQ,velocity_]:=SymbolJoin[V0,N,velocity];
Vspat[N_?InducedMetricQ,velocity_]:=SymbolJoin[Vspat,N,velocity];
Vs[N_?InducedMetricQ,velocity_]:=SymbolJoin[Vs,N,velocity];
Vv[N_?InducedMetricQ,velocity_]:=SymbolJoin[Vv,N,velocity];

(***BUILDING SYMBOLS:Perturbation of the metric***)

\[Phi][N_?InducedMetricQ]:=SymbolJoin[\[Phi],N];

Bs[N_?InducedMetricQ]:=SymbolJoin[Bs,N];
Bvp[N_?InducedMetricQ]:=SymbolJoin[Bv,N];
Bvt[N_?InducedMetricQ]:=SymbolJoin[Bv,N];

\[Psi][N_?InducedMetricQ]:=SymbolJoin[\[Psi],N];
Es[N_?InducedMetricQ]:=SymbolJoin[Es,N];
Ev[N_?InducedMetricQ]:=SymbolJoin[Ev,N];
{{Evp[N_?InducedMetricQ]:=SymbolJoin[Evp,N];},{Evt[N_?InducedMetricQ]:=SymbolJoin[Evt,N];}}
Etp[N_?InducedMetricQ]:=SymbolJoin[Etp,N];
Etpt[N_?InducedMetricQ]:=SymbolJoin[Ett,N];
Ett[N_?InducedMetricQ]:=SymbolJoin[Ett,N];


(***BUILDING SYMBOLS:Gauge vector and decomposition***)

\[Xi][N_?InducedMetricQ]:=SymbolJoin[\[Xi],N];

T[N_?InducedMetricQ]:=SymbolJoin[T,N];
Ls[N_?InducedMetricQ]:=SymbolJoin[Ls,N];
Lvp[N_?InducedMetricQ]:=SymbolJoin[Lvp,N];
Lvt[N_?InducedMetricQ]:=SymbolJoin[Lvt,N];


$ListFieldsBackgroundOnly[h_?InducedMetricQ]:={{a[h][],"a"},{H[h][],"\[ScriptCapitalH]"}};

$ListFieldsPerturbedOnly[N_?InducedMetricQ]:=With[{M=ManifoldOfCovD@CovDOfMetric@First@InducedFrom@N},Block[{\[Mu],\[Nu]},{\[Mu],\[Nu]}=GetIndicesOfVBundle[Tangent@M,2];
{{\[Phi][N][],"\[Phi]"},{Bs[N][],"\!\(\*SubscriptBox[\(B\), \(s\)]\)"},{Bvt[N][-\[Mu]],"\!\(\*SubscriptBox[\(B\), \(\(v\)\(\[UpTee]\)\)]\)"},{Bvp[N][],"\!\(\*SubscriptBox[\(B\), \(||\)]\)"},{\[Psi][N][],"\[Psi]"},{Es[N][],"\!\(\*SubscriptBox[\(E\), \(s\)]\)"},{Evp[N][],"\!\(\*SubscriptBox[SubscriptBox[\(E\), \(v\)], \(||\)]\)"},{Evt[N][-\[Mu]],"\!\(\*SubscriptBox[\(E\), \(\(v\)\(\[UpTee]\)\)]\)"},{Etp[N][],"\!\(\*SubscriptBox[\(E\), \(\(t\)\(||\)\)]\)"},{Etpt[N][-\[Mu]],"\!\(\*SubscriptBox[\(E\), \(t ||  \[UpTee] \)]\)"},{Ett[N][-\[Mu],-\[Nu]],"\!\(\*SubscriptBox[\(E\), \(t\)]\)\[UpTee]"},{T[N][],"T"},{Ls[N][],"L"},{Lvp[N][],"\!\(\*SubscriptBox[\(L\), \(||\)]\)"},{Lvt[N][-\[Mu]],"\!\(\*SubscriptBox[\(L\), \(\(v\)\(\[UpTee]\)\)]\)"}}]];



$ListFieldsBackgroundAndPerturbed[N_?InducedMetricQ,velocity_]:=With[{M=ManifoldOfCovD@CovDOfMetric@First@InducedFrom@N},Block[{\[Mu],\[Nu]},{\[Mu],\[Nu]}=GetIndicesOfVBundle[Tangent@M,2];
{{\[CurlyPhi][],"\[CurlyPhi]"},{\[Rho][velocity][],ToString@StringJoin[{"\[Rho]"},ToString[velocity]]},{P[velocity][],ToString@StringJoin[{"P"},ToString[velocity]]},{Vspat[N,velocity][-\[Mu]],ToString@StringJoin[{"\[ScriptCapitalV]",ToString[velocity]}]},{V0[N,velocity][],ToString@StringJoin[{"V0",ToString[velocity]}]},{Vs[N,velocity][],ToString@StringJoin[{"V",ToString[velocity]}]},{Vvp[N,velocity][-\[Mu]],ToString@StringJoin[{"V",ToString[velocity]}]},{Vvt[N,velocity][-\[Mu]],ToString@StringJoin[{"V",ToString[velocity]}]}}]];


(*DefMetricFields[g_?MetricQ,dg_,h_?InducedMetricQ,n_?DirectionVectorQ,PerturbParameter_:\[Epsilon]]:=Print["Dobidoouah"];*)

DefMetricFields[g_?MetricQ, dg_, N_?InducedMetricQ,n_?DirectionVectorQ, 
  PerturbParameter_: \[Epsilon]] := 
 Module[{Zn}, 
  With[{M = ManifoldOfCovD@CovDOfMetric@g, cd = CovDOfMetric@N}, 
   Block[{\[Mu], \[Nu]}, {\[Mu], \[Nu]} =  GetIndicesOfVBundle[Tangent@M, 2];
    If[Not[DefTensorQ[dg]], DefMetricPerturbation[g, dg, Evaluate[If[DefinedPerturbationParameter[$PerturbationParameter],$PerturbationParameter, PerturbParameter]]];

     DefinedPerturbationParameter[$PerturbationParameter] = True;
     PrintAs[dg] ^= "\[Delta]" <> ToString[g];
     dg[LI[Zn_], \[Mu]_, \[Nu]_] :=0 /; Zn > 1 && BackgroundFieldMethod;
     dg[\[Mu]_?AIndexQ, \[Nu]_?AIndexQ] := dg[LI[0], \[Mu], \[Nu]];, 
      If[$DefInfoQ, 
       Print["** Warning: Metric perturbation already defined. Thiscannot be redefined without undefining it. **"];];
];
    
(*Defining some tensors we shall need anyway*)
(DefScreenProjectedTensor[#[[1]], N,TensorProperties -> {"Traceless", "Transverse", 
          "SymmetricTensor"}, SpaceTimesOfDefinition -> {"Perturbed"},PrintAs -> #[[2]]]) & /@ $ListFieldsPerturbedOnly[N];

    Evaluate[\[Phi][N]]::usage = \[Phi]::usage;
    Evaluate[Bs[N]]::usage = Bs::usage;
    Evaluate[Bvp[N]]::usage =Bvp::usage;
    Evaluate[Bvt[N]]::usage =Bvt::usage;
    Evaluate[\[Psi][N]]::usage = \[Psi]::usage;
    Evaluate[Es[N]]::usage = Es::usage;
    Evaluate[Evp[N]]::usage = Evp::usage;
    Evaluate[Evt[N]]::usage = Evt::usage;
    Evaluate[Etp[N]]::usage = Subscript[Et, p]::usage;
    Evaluate[Etpt[N]]::usage = Etpt::usage;
    Evaluate[Ett[N]]::usage = Ett::usage;
    
    Evaluate[T[N]]::usage = T::usage;
    Evaluate[Ls[N]]::usage = Ls::usage;
    Evaluate[Lv[N]]::usage = Lvp::usage;
    Evaluate[Lvt[N]]::usage = Lvt::usage;

    (*If we want a nice output for the perturbation parameter,,*)
    MakeBoxes[PerturbParameter, StandardForm] :=StyleBox[ToString[$PerturbationParameter],FontColor -> RGBColor[0.3, 0.8, 0.8]]]]]

SetNumberOfArguments[DefMetricFields, {3, 4}];
Protect[DefMetricFields];
SetNumberOfArguments[DefMetricFields,{4,5}];
Protect[DefMetricFields];


DefMatterFields[uf_,duf_,h_?InducedMetricQ,n_?DirectionVectorQ, PerturbParameter_:\[Epsilon]]:=Print["Dobidoouah"];

SetNumberOfArguments[DefMatterFields,{4,5}];
Protect[DefMatterFields];


SplitMetric[g_?MetricQ,dg_,h_?InducedMetricQ,n_?DirectionVectorQ,gauge_?GaugeQ]:=Print["Dobidoouah"];


IndicesDown[expr_]:= Fold[SeparateMetric[First@$Metrics][#1,#2]&,expr,Select[IndicesOf[Up][expr],Not@LIndexQ[#]&]]
IndicesUp[expr_]:= Fold[SeparateMetric[First@$Metrics][#1,#2]&,expr,Select[IndicesOf[Down][expr],Not@LIndexQ[#]&]]


IndicesDown[0]:=0 ;(* This is to avoid bugs...*)
IndicesUp[0]:=0 ;


ConformalMetricName[g_?MetricQ,1]:=g;
ConformalMetricName[g_?MetricQ,conffactor_]:=SymbolJoin[g,conffactor,2];


DefConformalMetric[g_?MetricQ,conffactor_]:=Module[{n,q},Catch@With[{M=ManifoldOfCovD@CovDOfMetric@g,CD=CovDOfMetric@g},
With[{i1=DummyIn[Tangent[M]],i2=DummyIn[Tangent[M]],sy1=SymbolOfCovD[CD][[1]],sy2=SymbolOfCovD[CD][[2]],metlist=Select[$Metrics,InducedFrom[#]===Null&]},


If[Not@DefTensorQ[conffactor],DefTensor[conffactor[LI[n],LI[q]],{M},PrintAs->ToString[conffactor]]];


Off[DefMetric::old];(* Annoying message turned off*)
If[Not[DefTensorQ[ConformalMetricName[g,conffactor]]],


DefMetric[-1,ConformalMetricName[g,conffactor][-i1,-i2],SymbolJoin[CD,conffactor,2],{":",StringJoin[sy2,ToString[conffactor],ToString[2]]},PrintAs->StringJoin["[",PrintAs[g],"\!\("<>PrintAs[conffactor]<>"\^2\)","]"(*ToString[conffactor],ToString[2]*)],ConformalTo->{g[-i1,-i2],conffactor[LI[0],LI[0]]^2}];

];
On[DefMetric::old];

(* We have to ensure it is safe*)
Perturbation[conffactor[LI[0],LI[q_],indices___],n_]^:=0/;n>=1;


Off[ConformalRules::unknown];
(* We use the error sent by ConformalRules to chekc whether or not the metric in the list metlist is conformallyr elated to the metric g.
If it is the case we enforce transitivity of the conformal relations.*)
If[Catch@ConformalRules[g,#]=!=Null,
SetConformalTo[SymbolJoin[g,conffactor,2][-i1,-i2], {#[-i1, -i2],ConformalFactor[g,#]* conffactor[LI[0],LI[0]]^2}]]&/@metlist;
On[ConformalRules::unknown];

]
]
]

SetNumberOfArguments[DefConformalMetric,2]
Protect[DefConformalMetric];


ConfHead[_,_][delta[\[Mu]_,\[Nu]_]]:=delta[\[Mu],\[Nu]](* Because I know that when there is delta function in an expression, it is always with one index up and one down...so this should be fine.*)

 
ConfHead[metric1_?MetricQ,metric2_?MetricQ][ConfHead[metric2_?MetricQ,metric1_?MetricQ][expr_]]:=expr (* Not necessary *)
ConfHead[metric1_?MetricQ,metric1_?MetricQ][expr_]:=expr
ConfHead[metric2_?MetricQ,metric3_?MetricQ][ConfHead[metric1_?MetricQ,metric2_?MetricQ][expr_]]:=ConfHead[metric1,metric3][expr]


(* Thanks to Jolyon and Leo Stein, the definition below should be much more general. *)
(* The main reason is that the delta tensor is greedy and wants to contract through expressions like
ConfHead[...][f[Scalar[phi[]]]].*)
ConfHead/:IsIndexOf[ConfHead[_,_][_],_,delta]:=False;


$BoolBasicConformalWeight=True;

WeightOfIndicesList[indices_List]:=With[{aindex=Select[indices,Not[LIndexQ[#]]&]},Length@Select[aindex,DownIndexQ]-Length@Select[aindex,UpIndexQ]]

(* Conformal weight of a tensor *)
ConformalWeight[tens_?xTensorQ]:=0;
ConformalWeight[tens_?xTensorQ[indices___]]:=ConformalWeight[tens]+WeightOfIndicesList[{indices}]

ConformalWeight[f_?ScalarFunctionQ]:=0;

MyChangeChristoffel[expr_,cd_,cd_]:=expr

MyChangeChristoffel[expr_,cd2list_List,cd1_]:=Fold[MyChangeChristoffel[#1,#2,cd1]&,expr,cd2list]

MyChangeChristoffel[expr_,cd2_,cd1_]:=With[{vb=Tangent[ManifoldOfCovD[cd1]]},With[{chr1=Head[(Christoffel[cd1])[DummyIn[vb],-DummyIn[vb],-DummyIn[vb]]],chr2=Head[(Christoffel[cd2])[DummyIn[vb],-DummyIn[vb],-DummyIn[vb]]],chr21=Head[(Christoffel@@Sort[{cd2,cd1}])[DummyIn[vb],-DummyIn[vb],-DummyIn[vb]]],sign=Order[cd2,cd1]},
expr/.chr2[i1_,i2_,i3_]:>chr1[i1,i2,i3]+sign*chr21[i1,i2,i3]
]
]


ExistInertHead[head_]:=Length@Cases[$InertHeads,head]>0

RulesConf[metric1_?MetricQ,metric2_?MetricQ]:=(
Module[{cd1,cd2,confa2,confa,M,res,inds},cd1=CovDOfMetric[metric1];cd2=CovDOfMetric[metric2];


confa2=ConformalFactor[metric2,metric1];
confa=Sqrt[ConformalFactor[metric2,metric1]]/.Sqrt[x_^n_?EvenQ]:>x^(n/2);
(*In principle this should give a or 1/a depending if we go from metric1 to metric2 or metric2 to metric1*)

M=ManifoldOfCovD[cd1];
inds=DummyIn/@Table[Tangent[M],{Range[4]}];
With[{i1=inds[[1]],i2=inds[[2]],i3=inds[[3]],i4=inds[[4]]},

(* Once confheads are put on expression (as a result of a formal conformal transformation) then we remove them by expressing what they mean in function of the original tensors and the scale factor *)
res=
{RuleDelayed@@Hold[ConfHead[metric1,metric2][(Riemann@cd1)[i1_,i2_,i3_,i4_]],confa^(WeightOfIndicesList[{i1,i2,i3,i4}]-2)(Riemann@cd2)[i1,i2,i3,i4]],
RuleDelayed@@Hold[ConfHead[metric1,metric2][(Ricci@cd1)[i1_,i2_]],confa^(WeightOfIndicesList[{i1,i2}]-2)(Ricci@cd2)[i1,i2]],
RuleDelayed@@Hold[ConfHead[metric1,metric2][(RicciScalar@cd1)[]],(RicciScalar@cd2)[]],
RuleDelayed@@Hold[ConfHead[metric1,metric2][(Christoffel@cd1)[i1_,i2_,i3_]],confa^(WeightOfIndicesList[{i1,i2,i3}]-1)*(Christoffel@cd2)[i1,i2,i3]],
RuleDelayed@@Hold[ConfHead[metric1,metric2][(Determinant[metric1,AIndex])[]],(* This is removed because now xTensor is patched confa2^DimOfManifold[M]. Thanks to Leo Stein.*)(Determinant[metric2,AIndex])[]],

(* This line below is not working well.  The problem should be considered later when xTensor knows how to handle the epsilon of a frozen metric. So this really works only when metric1 is the ambient metric... *)
RuleDelayed@@Hold[ConfHead[metric1,metric2][(epsilon@metric1)[inds__?(Length[{#}]===DimOfManifold[M]&)]],(*confa2^(DimOfManifold[M]/2)*)confa^(WeightOfIndicesList[{inds}])(epsilon@metric1)[inds]],

(* Not really satisfactory but minimalist for scalar functions *)
(* Following Leo Stein suggestion, we allow the scalar function to have several arguments *)
ConfHead[metric1,metric2][f_?ScalarFunctionQ[arg___]]:>Simplify[confa2^((ConformalWeight[f])/2),Assumptions->confa>0]f[arg],

ConfHead[metric1,metric2][tens_?xTensorQ[indss___]]:>Simplify[confa2^(ConformalWeight[tens[indss]]/2),Assumptions->confa>0]tens[indss]
};

res
]
]
)


RemoveInducedDerivative[expr_,cd_]:=Module[{res},With[{h=MetricOfCovD@cd},
If[InducedFrom@h===Null,expr,
With[{g=First@InducedFrom@h},
With[{CD=CovDOfMetric@g},
res=(expr//.cd[ind_][Expr___]:>Projector[h][CD[ind][Expr]])/.Projector[h]->ProjectWith[h];
If[res=!=expr,Print["** Warning: you are using ToMetric or Conformal with induced covariant derivatives. \nThese induced derivatives are first expressed in function of the covariant derivative form which they are induced since we do not know very well how to handle that. **"];];
res
]
]
]
]
];

RemoveAllInducedDerivatives[expr_]:=With[{InducedMetrics=Select[$Metrics,InducedFrom[#]=!=Null&]},
Fold[RemoveInducedDerivative[#1,CovDOfMetric[#2]]&,expr,InducedMetrics]
];


ToMetric[expr_,metric1_?MetricQ]:=If[InducedFrom@metric1=!=Null,expr,
Module[{res,preexpression},
Off[ConformalRules::unknown];
With[{cd1=CovDOfMetric[metric1],$CovDsNotInduced=Select[Rest@$CovDs,InducedFrom[MetricOfCovD[#]]===Null&]},
With[{$CovDsNotInducedRelatedTocd1=Select[$CovDsNotInduced,(Catch@ConformalRules[metric1,MetricOfCovD[#]]=!=Null)&]},

preexpression=(RemoveAllInducedDerivatives[expr]//ProjectorToMetric//EinsteinToRicci//WeylToRiemann//ContractMetric//ToCanonical);

res=ChangeCovD[#,$CovDsNotInduced,cd1]&@
ChristoffelToGradConformal[#,$CovDsNotInducedRelatedTocd1,cd1]&@
MyChangeChristoffel[#,$CovDsNotInducedRelatedTocd1,cd1]&@
ChangeCovD[#,$CovDsNotInduced,cd1]&@
ChangeCurvature[#,$CovDsNotInduced,cd1]&@preexpression;
Off[ConformalRules::unknown];

Fold[(#1/.ConformalRules[MetricOfCovD[#2],metric1])&,res,$CovDsNotInducedRelatedTocd1]
]
]
]
];

ToMetric[expr_]:=ToMetric[expr,First@$Metrics];

SetNumberOfArguments[ToMetric,{1,2}]
Protect[ToMetric];


InverseMetricQ[x_?xTensorQ]:=With[{tid=TensorID@x},(Length@tid>0)&&(tid[[1]]===xAct`xTensor`Private`InvMetric)]
InverseMetricQ[_]:=False


SeparateIndicesDownOfInverseMetric[invmetric_?InverseMetricQ][expr_]:=Fold[SeparateMetric[First@$Metrics][#1,#2]&,expr,IndicesOf[Down,invmetric][expr]];
SeparateIndicesDownOfInverseMetric[_][expr_]:=expr


Conformal[metricbase_?MetricQ][metric1_?MetricQ,metric2_?MetricQ][expr_]:=Module[{cdb,cd1,cd2,res,res2,(*oldpre,*)resbis,exprnoproj,M,i1,i2,beforeputtingconfheads,IDInvMetric},
(* The conflict with CreenDollarIndicea has now been solved. So there is no need to redefine tempararoly $PrePrint*)
(*oldpre=$PrePrint;$PrePrint=Identity;*)

(* we define the Covds associated with the metric. The starting metric is metric1, the conformally transformed metric is metric2, and metricbase i the base metric for raising and lowering indiced. It might be one of the other two, but it might not be...*)
cdb=CovDOfMetric[metricbase];
cd1=CovDOfMetric[metric1];Off[ConformalFactor::"unknown"];
cd2=CovDOfMetric[metric2];

exprnoproj=expr//ProjectorToMetric;
M=ManifoldOfCovD[cd1];
i1=DummyIn[Tangent[M]];
i2=DummyIn[Tangent[M]];

IDInvMetric=SeparateIndicesDownOfInverseMetric[Inv[metric1]];

beforeputtingconfheads=IDInvMetric[(IndicesDown@ToMetric[exprnoproj,metric1])
/.Scalar[ex_]:>Scalar[IndicesDown[ex]]/.sf_?ScalarFunctionQ[args___]:>sf@@IndicesDown/@{args}]
/.Scalar[ex_]:>Scalar[IDInvMetric[ex]]/.sf_?ScalarFunctionQ[args___]:>sf@@IDInvMetric/@{args};
(* Above we make sure that IndicesDown and SeparateIndicesDownOfInverseMetric goes inside the scalar Head*)

(*We use ToMetric to have only references to the metric1 and its associated CovD and curvature tensors *)
(*Print["beforeputtingconfheads ",beforeputtingconfheads];*)

(* Then we place the ConfHead on every expression to perform formally the conformal transformation. *)
res=(beforeputtingconfheads
(* Dirty case of scalar functions *)
/.f_?ScalarFunctionQ[ex___]:>ConfHead[metric1,metric2][f[ex]]
(* tensors *)
/.tens_?xTensorQ[inds___]:>ConfHead[metric1,metric2][tens[inds]]
(* Covariant derivatives *)
/.cd1[i1_?DownIndexQ]:>cd2[i1]
(* Now that we have ConfHead everywhere we need to remove the head by specifying the change*)
(* First Obvious rules for metric and inverse metric*)
/.ConfHead[metric1,metric2][metric1[i1_?DownIndexQ,i2_?DownIndexQ]]:>metric2[i1,i2]
/.ConfHead[metric1,metric2][Inv[metric1][i1_?UpIndexQ,i2_?UpIndexQ]]:>Inv[metric2][i1,i2]);

(* And then all other rules to remove the ConfHead*)

resbis=res//.RulesConf[metric1,metric2];


(* So here we have conformally transformed the expression, but now we want to express it in function of the original metric and orginal covD etc...
Indeed at that point, we still have the second metric, and the Riemann of the second metric for instance. SO we use again ToMetric*)

(*$PrePrint=oldpre;*)

On[ConformalFactor::"unknown"];
Off[ToCanonical::"cmods"];

res2=ToCanonical@ContractMetric@NoScalar[ToMetric[resbis,metricbase]];
On[ToCanonical::"cmods"];
res2
]

(* In case the base metric is unspecified, it is the base metric of course...*)
Conformal[metric1_?MetricQ,metric2_?MetricQ][expr_]:=Conformal[First@$Metrics][metric1,metric2][expr]


SplitPerturbations[expr_,ListPairs_List,h_?InducedMetricQ,n_?DirectionVectorQ]:=Print["Dobidoouah"];
SplitPerturbations[expr_,h_?InducedMetricQ,n_?DirectionVectorQ]:=SplitPerturbations[expr,{},h,n]
SetNumberOfArguments[SplitPerturbations,{3,4}];
Protect[SplitPerturbations];


ToLightConeFromRules[expr_,RulesList_List,h_?InducedMetricQ,n_?DirectionVectorQ,order_(*?IntegerQ*)]:=Print["Dobidoouah"];

SetNumberOfArguments[ToLightConeFromRules,{4,5}];
Protect[ToLightConeFromRules];


ExtractComponents[expr_,h_?InducedMetricQ,n_?DirectionVectorQ,roj_List,ListIndsToContract_List]:=Print["Dobidoouah"];

SetNumberOfArguments[ExtractComponents,{3,5}];
Protect[ExtractComponents];

VisualizeTensor[expr_,h_?InducedMetricQ,n_?DirectionVectorQ]:=Print["Dobidoouah"];

SetNumberOfArguments[VisualizeTensor,3];
Protect[VisualizeTensor];


On[RuleDelayed::rhs];


End[]
EndPackage[]
